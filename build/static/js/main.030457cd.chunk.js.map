{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","context","formatter","input","time","toString","length","slice","formatTime","setState","milliseconds","state","timePassed","seconds","Math","floor","minutes","timeNow","parseInt","resetTime","window","clearInterval","interval","started","history","startTime","setInterval","stopTime","concat","className","this","onClick","map","el","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HCuF5BC,G,8DAjFb,WAAYC,EAAOC,GAAU,IAAD,8BAC1B,cAAMD,EAAOC,IAWfC,UAAY,SAACC,GACX,IAAMC,EAAOD,EAAME,WACnB,OAAOD,EAAKE,OAAS,EAAI,IAAMF,EAAOA,EAAKG,OAAO,IAdxB,EAiB5BC,WAAa,WACX,EAAKC,SAAS,CACZC,aAAc,EAAKR,UAAU,EAAKS,MAAMC,YACxCC,QAAS,EAAKX,UAAUY,KAAKC,MAAO,EAAKJ,MAAMC,WAAa,IAAO,KACnEI,QAAS,EAAKd,UAAUY,KAAKC,MAAO,EAAKJ,MAAMC,WAAX,IAAsC,QArBlD,EAyB5BK,QAAU,WACR,IAAIJ,EAAUK,SAAS,EAAKP,MAAMC,WAAY,IAAM,EACpD,EAAKH,SAAS,CAAEG,WAAYC,IAC5B,EAAKL,cA5BqB,EA+B5BW,UAAY,WACVC,OAAOC,cAAc,EAAKC,UAC1B,EAAKb,SAAS,CACZc,SAAS,EACTX,WAAY,EACZF,aAAc,KACdG,QAAS,KACTG,QAAS,KACTQ,QAAS,MAvCe,EA2C5BC,UAAY,YACgB,IAAvB,EAAKd,MAAMY,UACd,EAAKD,SAAWI,YAAY,EAAKT,QAAS,IAC1C,EAAKR,SAAS,CAAEc,SAAS,MA9CC,EAiD5BI,SAAW,YACkB,IAAvB,EAAKhB,MAAMY,UACbH,OAAOC,cAAc,EAAKC,UAC1B,EAAKb,SAAS,CACZc,SAAS,EACTC,QAAS,EAAKb,MAAMa,QAAQI,OAAnB,UAA6B,EAAKjB,MAAMK,QAAxC,YAAmD,EAAKL,MAAME,QAA9D,YAAyE,EAAKF,MAAMD,eAC7FE,WAAY,EACZF,aAAc,KACdG,QAAS,KACTG,QAAS,SAxDb,EAAKL,MAAQ,CACXY,SAAS,EACTX,WAAY,EACZF,aAAc,KACdG,QAAS,KACTG,QAAS,KACTQ,QAAS,IARe,E,qDAgE1B,OACE,yBAAKK,UAAU,aACb,yBAAKA,UAAU,qBACZC,KAAKnB,MAAMK,QAAQ,0BAAMa,UAAU,oBAAhB,KACnBC,KAAKnB,MAAME,QAAQ,0BAAMgB,UAAU,oBAAhB,KACnBC,KAAKnB,MAAMD,cACd,yBAAKmB,UAAU,aACb,yBAAKA,UAAU,oBAAoBE,QAAUD,KAAKL,WAAlD,SACA,yBAAKI,UAAU,oBAAoBE,QAAUD,KAAKH,UAAlD,QACA,yBAAKE,UAAU,oBAAoBE,QAAUD,KAAKX,WAAlD,UAELW,KAAKnB,MAAMa,QAAQQ,KAAI,SAASC,GAAK,OAAO,0BAAMJ,UAAU,sBAAsBI,W,GA7ErEC,IAAMC,YCQJC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.030457cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      started: false,\n      timePassed: 0,\n      milliseconds: '00',\n      seconds: '00',\n      minutes: '00',      \n      history: []\n    }\n  }\n\n  formatter = (input) => {\n    const time = input.toString();\n    return time.length < 2 ? '0' + time : time.slice(-2);\n  }\n\n  formatTime = () => {\n    this.setState({\n      milliseconds: this.formatter(this.state.timePassed),\n      seconds: this.formatter(Math.floor((this.state.timePassed / 100) % 60)),\n      minutes: this.formatter(Math.floor((this.state.timePassed / (100 * 60)) % 60))\n    });\n  }\n\n  timeNow = () => {\n    let seconds = parseInt(this.state.timePassed, 10) + 1;\n    this.setState({ timePassed: seconds });\n    this.formatTime();\n  }\n\n  resetTime = () => {\n    window.clearInterval(this.interval);\n    this.setState({\n      started: false,\n      timePassed: 0,\n      milliseconds: '00',\n      seconds: '00',\n      minutes: '00',\n      history: []\n    });\n  }\n\n  startTime = () => {\n    if(this.state.started === true){ return; }\n    this.interval = setInterval(this.timeNow, 10);\n    this.setState({ started: true  });\n  }\n\n  stopTime = () => {\n    if (this.state.started !== false) {\n      window.clearInterval(this.interval);\n      this.setState({ \n        started: false,\n        history: this.state.history.concat(`${this.state.minutes}:${this.state.seconds}:${this.state.milliseconds}`),\n        timePassed: 0,\n        milliseconds: '00',\n        seconds: '00',\n        minutes: '00'\n      });\n    }    \n  }\n\n  render(){\n    return (\n      <div className=\"stopwatch\">\n        <div className=\"stopwatch__screen\">\n          {this.state.minutes}<span className=\"stopwatch__colon\">:</span>\n          {this.state.seconds}<span className=\"stopwatch__colon\">:</span>\n          {this.state.milliseconds}</div>\n        <div className=\"container\">\n          <div className=\"stopwatch__button\" onClick={ this.startTime }>Start</div>\n          <div className=\"stopwatch__button\" onClick={ this.stopTime }>Stop</div>\n          <div className=\"stopwatch__button\" onClick={ this.resetTime }>Reset</div>\n        </div>\n    {this.state.history.map(function(el) {return <span className=\"stopwatch__history\">{el}</span>})}       \n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}